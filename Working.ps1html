<#
.DESCRIPTION
The script combines PowerShell and HTML content in a single file.
#>

Add-Type -AssemblyName System.Windows.Forms

# Define the PowerShell object as a COM-visible class
Add-Type @"
    using System;
    using System.Runtime.InteropServices;

    [ComVisible(true)]
    public class PowerShellObject {
        public void ExecutePowerShellScript() {
            // Your custom PowerShell code goes here
            Console.WriteLine("Executing custom function in PowerShell script.");
        }
    }
"@

# Create an instance of the COM-visible class
$psObject = New-Object PowerShellObject

# HTML content using a here-string
$htmlContent = @"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Interactive Window</title>
    <style>
        .container {
  width: 100%;
  display: flex;
  overflow: auto;
  min-height: 100vh;
  align-items: flex-end;
  flex-direction: row;
  background-size: cover;
  justify-content: flex-end;
  background-image: url('https://raw.githubusercontent.com/NorseDevInc/OnlineAppInterface/main/Background.png');
}
.checkbox {
  top: 246px;
  left: 136px;
  width: var(--dl-size-size-small);
  height: var(--dl-size-size-small);
  position: absolute;
}
.checkbox1 {
  top: 305px;
  left: 136px;
  width: var(--dl-size-size-small);
  height: var(--dl-size-size-small);
  position: absolute;
}
.checkbox2 {
  top: 187px;
  left: 135px;
  width: var(--dl-size-size-small);
  height: var(--dl-size-size-small);
  position: absolute;
}
.text {
  top: 263px;
  left: 192px;
  width: var(--dl-size-size-xlarge);
  height: var(--dl-size-size-small);
  position: absolute;
  font-size: 20px;
  align-self: center;
  font-family: "Poppins";
}
.text1 {
  top: 319px;
  left: 192px;
  width: var(--dl-size-size-xlarge);
  height: var(--dl-size-size-small);
  position: absolute;
  font-size: 20px;
  align-self: center;
  font-family: "Poppins";
}
.text2 {
  top: 201px;
  left: 191px;
  width: var(--dl-size-size-xlarge);
  height: var(--dl-size-size-small);
  position: absolute;
  font-size: 20px;
  align-self: center;
  font-family: "Poppins";
}
.button {
  width: 289px;
  height: 59px;
  font-size: 40px;
  margin-right: var(--dl-space-space-oneandhalfunits);
  margin-bottom: var(--dl-space-space-oneandhalfunits);
}
    </style>
    <script>
        function callCustomPowerShellFunction() {
            try {
                // Trigger PowerShell script execution
                window.external.ExecutePowerShellScript();
            } catch (error) {
                alert('Error calling PowerShell script: ' + error.message);
            }
        }

        function openNotepad() {
            try {
                window.open("notepad.exe");
            } catch (error) {
                alert('Error opening notepad: ' + error.message);
            }
        }

        function openAlert() {
            alert('OPEN');
        }
    </script>
</head>
<body>
    <div className='container'>
      <input type="checkbox" checked="true" className='checkbox' />
      <input type="checkbox" checked="true" className='checkbox1' />
      <input type="checkbox" checked="true" className='checkbox2' />
      <span className='text'>Norse auto clicker</span>
      <span className='text1'>Google Chrome</span>
      <span className='text2'>Visual studio code</span>
      <button
        type="button"
        className='button'
      >
        Install
      </button>
    </div>
</body>
</html>
"@

# Create a form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Custom Window"
$form.Size = New-Object System.Drawing.Size(1200, 800)
$form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle

# Create a WebBrowser control
$webBrowser = New-Object System.Windows.Forms.WebBrowser
$webBrowser.ObjectForScripting = $psObject
$webBrowser.DocumentText = @"
$htmlContent
"@
$webBrowser.ScrollBarsEnabled = $false
$webBrowser.ScriptErrorsSuppressed = $true
$webBrowser.Size = New-Object System.Drawing.Size(1200, 800)

# Subscribe to DocumentCompleted event to ensure the document is fully loaded
$documentCompletedHandler = {
    # Remove the event handler to prevent multiple calls
    $webBrowser.Remove_DocumentCompleted($documentCompletedHandler)

    # Show the form after the document is fully loaded
    $form.Add_Shown({$form.Activate()})
}

# Add the DocumentCompleted event handler
$webBrowser.Add_DocumentCompleted($documentCompletedHandler)

# Add the WebBrowser control to the form
$form.Controls.Add($webBrowser)

# Start the message loop
[System.Windows.Forms.Application]::Run($form)
